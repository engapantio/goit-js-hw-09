{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["const formData = { email: '', message: '' };\nconst inputForm = document.querySelector('.feedback-form');\n\ninputForm.addEventListener('input', e => {\n  formData.email = inputForm.elements.email.value.trim();\n  formData.message = inputForm.elements.message.value.trim();\n  localStorage.setItem('feedback-form-state', JSON.stringify(formData));\n});\n\nif (localStorage.getItem('feedback-form-state')) {\n  const formDefault = JSON.parse(localStorage.getItem('feedback-form-state'));\n  inputForm.elements.email.value = formDefault.email;\n  inputForm.elements.message.value = formDefault.message;\n}\n\ninputForm.addEventListener('submit', e => {\n  e.preventDefault();\n\n  if (\n    inputForm.elements.email.value === '' ||\n    inputForm.elements.message.value === ''\n  ) {\n    alert('Fill please all fields');\n    return;\n  }\n  if (\n    inputForm.elements.email.value !== '' &&\n    inputForm.elements.message.value !== ''\n  ) {\n    console.log(formData);\n    localStorage.clear();\n    Object.keys(formData).forEach(key => (formData[key] = ''));\n    Array.from(inputForm.elements).forEach(element => (element.value = ''));\n  }\n});\n\n// На що буде звертати увагу ментор при перевірці:\n\n// На живій сторінці відображається форма з двома елементами форми і кнопкою типу submit\n// Форма стилізована згідно з макетом\n// На формі прослуховуються події input і submit\n// При введенні даних у будь-який елемент форми вони записуються у локальне сховище під ключем \"feedback-form-state\", збережені дані не містять пробіли по краях\n// Введення даних в одне поле форми не видаляє дані в сховищі для іншого\n// При оновленні сторінки дані з локального сховища підставляються в елементи форми, у полях форми відсутні undefined\n// При сабміті форми є перевірка, щоб обидва елементи форми були заповнені\n// Під час сабміту форми, якщо обидва елементи форми заповнені, виводиться у консоль об'єкт з полями email, message та їхніми поточними значеннями, а також очищаються сховище і поля форми\n// Якщо після сабміту форми ввести в будь-який елемент форми дані, то в локальному сховищі не з’являються дані від попереднього сабміта\n"],"names":["formData","inputForm","e","formDefault","key","element"],"mappings":"wFAAA,MAAMA,EAAW,CAAE,MAAO,GAAI,QAAS,EAAE,EACnCC,EAAY,SAAS,cAAc,gBAAgB,EAEzDA,EAAU,iBAAiB,QAASC,GAAK,CACvCF,EAAS,MAAQC,EAAU,SAAS,MAAM,MAAM,KAAI,EACpDD,EAAS,QAAUC,EAAU,SAAS,QAAQ,MAAM,KAAI,EACxD,aAAa,QAAQ,sBAAuB,KAAK,UAAUD,CAAQ,CAAC,CACtE,CAAC,EAED,GAAI,aAAa,QAAQ,qBAAqB,EAAG,CAC/C,MAAMG,EAAc,KAAK,MAAM,aAAa,QAAQ,qBAAqB,CAAC,EAC1EF,EAAU,SAAS,MAAM,MAAQE,EAAY,MAC7CF,EAAU,SAAS,QAAQ,MAAQE,EAAY,OACjD,CAEAF,EAAU,iBAAiB,SAAUC,GAAK,CAGxC,GAFAA,EAAE,eAAc,EAGdD,EAAU,SAAS,MAAM,QAAU,IACnCA,EAAU,SAAS,QAAQ,QAAU,GACrC,CACA,MAAM,wBAAwB,EAC9B,MACF,CAEEA,EAAU,SAAS,MAAM,QAAU,IACnCA,EAAU,SAAS,QAAQ,QAAU,KAErC,QAAQ,IAAID,CAAQ,EACpB,aAAa,MAAK,EAClB,OAAO,KAAKA,CAAQ,EAAE,QAAQI,GAAQJ,EAASI,CAAG,EAAI,EAAG,EACzD,MAAM,KAAKH,EAAU,QAAQ,EAAE,QAAQI,GAAYA,EAAQ,MAAQ,EAAG,EAE1E,CAAC"}